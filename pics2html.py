#---------------------------------------------------------------------
# pics2html.py
#
# by William E. Melvin
#
# Create a HTML document to view all JPG and PNG files in the current 
# directory (default) or directory specified on the command line.
#
#---------------------------------------------------------------------
# TO-DO: [ ] Add docstrings.
#---------------------------------------------------------------------
# 2006-12-09: Begin coding.
#
# 2006-12-10: Still coding after midnight.  Just like the old days ;)
#
# 2006-12-27: Changed layout of the pic_index page so navigation
# link is in about the same place as on the individual photo pages.
#
# 2008-07-29: On the individual page for each picture the image is now
# inside a link to the image file. The image height is set to 90%.
# Clicking on the image will load the full-size image in the browser.
#
# 20080821.1: Added option scale_image that controls whether the image
# is displayed directly on the page (options['scale_image'] = 0) or as 
# a link to the image with .img style set to scale image to use 90% of 
# page (options['scale_image'] = 1). Also added app_title and a comment 
# header in the generated HTML files.
#
# 20080821.2: Sort filelist.
#
# 20091015.1: A lot of refactoring:
# Will now work as a standalone script or by calling pics2html_main()
# from another script.
# Replaced opt_.. vars with options dictionary.
# Will process a directory passed on the command-line instead of only 
# processing the current directory.
# Write a default options file if command-line argument is '-opt'.
# Converted module and functions into a class and methods, more as 
# a learning exercise than anything else.
#
# 2010-06-21: Made index_file_name an option in the opts dictionary 
# instead of a constant. It still defaults to pic_index.html but now 
# it can be changed via the options file. Also going to change the 
# version numbering from the dated build number to the typical
# major.minor.whatever scheme.
#
# Added home_link_all option switch. If set to 1 (default) the link
# for home_url is placed on each image page. Otherwise the home link
# is only put on the index page.
#
# [Version 1.0.1]
#
#---------------------------------------------------------------------

import os, sys, Image

app_title = 'pics2html.py  1.0.1  by Bill Melvin (http://melvin.org)'

class Pics2HTML:

    options_file_name = 'pics2html_options.txt'

    html_doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">'

    html_charset = '<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >'

    thumbnail_filename_prefix = 'pics2html_thumbnail_'

    thumbnail_size = 100, 100

    opts = {
        'index_file_name': 'pic_index.html',
        'title': 'PICTURES',
        'heading': 'Pictures',
        'home_url': '',
        'home_url_text': 'Home',
        'css_url': '',
        'css_class_prefix': 'pics',
        'scale_image': 1,
        'home_link_all': 1
        }
        
    image_dir = ''
    
    app_name = ''


# The opts['css_class_prefix'] value is used to create the following CSS 
# classes in the HTML.  These assume the default prefix 'pics'.
#   pics_body
#   pics_nav
#   pics_heading
#   pics_img

    def __init__(self, name=app_title):
      self.app_name = name
    

    def pic_html_filename(self, image_file_name):
        # Return a file name for the HTML file associated with an image file. 
        return 'pic_page_' + os.path.splitext(image_file_name)[0] + '.html'


    def get_bool_opt(self, opt_str):
        # True value may be represented by '1', 'y' or 'Y' for "Yes", or
        # 't' or 'T' for "True". Only the first character is checked so
        # the words "True" and "Yes" are assumed.
        true_set = set('1tTyY')
        if len(opt_str) < 1:
            return 0
        else:
            if opt_str[0] in true_set: 
                return 1
            else:
                return 0


    def image_html(self, index, count, image_file_name, prev_file_name, next_file_name):
        htmname = os.path.join(self.image_dir, self.pic_html_filename(image_file_name))
        label = '(' + str(index + 1) + ' of ' + str(count) + ')'
        print 'Creating ' + htmname
        htm = open(htmname, 'w')
        htm.writelines('<!-- Document generated by ' + self.app_name + ' -->\n')
        htm.writelines(self.html_doctype + '\n')
        htm.writelines('<html>\n')
        htm.writelines('<head>\n')
        htm.writelines('<title>' + self.opts['title'] + ' ' + label + '</title>\n')
        htm.writelines(self.html_charset + '\n')
        if self.opts['css_url'] <> '':
            htm.writelines('<link rel="stylesheet" type="text/css" href="' 
                          + self.opts['css_url'] + '">\n')    
        if self.opts['scale_image'] == 1:
            htm.writelines('<style type="text/css">\n')
            htm.writelines('img {height: 90%;}\n')
            htm.writelines('</style>\n')
            
        htm.writelines('</head>\n')
        htm.writelines('<body class="' + self.opts['css_class_prefix'] + '_body">\n')  
        htm.writelines('<a class="' + self.opts['css_class_prefix']
                      + '_nav" href="' + self.opts['index_file_name'] + '">^Back</a>&nbsp;\n')
                      
        if len(prev_file_name) > 0:
            htm.writelines('<a class="' + self.opts['css_class_prefix'] 
                          + '_nav" href="' + self.pic_html_filename(prev_file_name) 
                          + '">&lt;Prev</a>&nbsp;\n')
                          
        if len(next_file_name) > 0:
            htm.writelines('<a class="' + self.opts['css_class_prefix'] 
                          + '_nav" href="' + self.pic_html_filename(next_file_name) 
                          + '">Next&gt;</a>&nbsp;\n')
                          
        #htm.writelines('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
        htm.writelines('<span class="' + self.opts['css_class_prefix'] + '_heading">' + self.opts['heading']
                      + '</span>&nbsp;\n')
        htm.writelines(label + '\n')
        htm.writelines('<hr><p>')
        
        if self.opts['scale_image'] == 1:
            htm.writelines('<a href="' + image_file_name + '">')
            
        htm.writelines('<img class="' + self.opts['css_class_prefix']
                      + '_img" src="' + image_file_name + '" alt="' + image_file_name + '">')

        if self.opts['scale_image'] == 1:
            htm.writelines('</a>')
            
        htm.writelines('\n<hr>\n')
        if (self.opts['home_url'] <> '') and (self.opts['home_link_all'] == 1):
            htm.writelines('&nbsp;<a class="' + self.opts['css_class_prefix']
                          + '_nav" href="' + self.opts['home_url'] + '">Home</a>\n')
        htm.writelines('</body>\n')
        htm.writelines('</html>\n')
        htm.close()   
      

    def read_options_file(self):
        # Read options.
        optname = os.path.join(self.image_dir, self.options_file_name)
        if os.path.exists(optname):
            optfile = open(optname)
            lines = optfile.readlines()
            optfile.close()
            for line in lines:
                if line.find('=') > 0:
                    a, b = line.split('=')
                    a = a.lower()
                    b = b.strip()
                    if a == 'index_file_name':
                        self.opts['index_file_name'] = b
                    elif a == 'title':
                        self.opts['title'] = b
                    elif a == 'heading':
                        self.opts['heading'] = b
                    elif a == 'css_url':
                        self.opts['css_url'] = b
                    elif (a == 'css_class_prefix') and (len(b) > 0):
                        self.opts['css_class_prefix'] = b
                    elif a == 'home_url':
                        self.opts['home_url'] = b
                    elif a == 'home_url_text':
                        self.opts['home_url_text'] = b
                    elif a == 'scale_image':
                        self.opts['scale_image'] = self.get_bool_opt(b)
                    elif a == 'home_link_all':
                        self.opts['home_link_all'] = self.get_bool_opt(b)


    def write_options_file(self, dir):    
        optname = os.path.join(dir, self.options_file_name)
        print optname
        if os.path.exists(optname):
            print 'Options file already exists.'
        else:
            print 'Writing options file.'
            optfile = open(optname, 'w')
            for key in self.opts.keys():
                optfile.writelines(key + '=' + str(self.opts[key]) + '\n')
            optfile.close()


    def write_index_html_head(self, index_htm):    
        index_htm.writelines('<!-- Document generated by ' + self.app_name + ' -->\n')
        index_htm.writelines(self.html_doctype + '\n')
        index_htm.writelines('<html>\n')
        index_htm.writelines('<head>\n')
        index_htm.writelines('<title>' + self.opts['title'] + '</title>\n')
        index_htm.writelines(self.html_charset + '\n')
        if self.opts['css_url'] <> '':
            index_htm.writelines('<link rel="stylesheet" type="text/css" href="' + self.opts['css_url'] + '">\n')
        index_htm.writelines('</head>\n')
        index_htm.writelines('<body class="' + self.opts['css_class_prefix'] + '_body">\n')  

        if len(self.opts['home_url']) > 0:
          index_htm.writelines('<a class="' + self.opts['css_class_prefix'] 
                              + '_nav" href="' + self.opts['home_url'] + '">^' + self.opts['home_url_text'] + '</a>\n')
        #index_htm.writelines('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
        index_htm.writelines('<span class="' + self.opts['css_class_prefix'] + '_heading">' + self.opts['heading'] 
                            + '</span>\n')

        index_htm.writelines('<hr>\n')

        
    def write_index_html_tail(self, index_htm):    
        index_htm.writelines('<p>&nbsp;</p>\n')
        index_htm.writelines('<hr>\n')
        index_htm.writelines('</body>\n')
        index_htm.writelines('</html>\n')
        index_htm.close()   


    def create_thumbnail(self, full_image_name, thumbnail_name, full_thumbnail_name):
        if os.path.exists(full_thumbnail_name):
            print '    ' + thumbnail_name + ' already exists.'
        else:
            print '    Creating ' + thumbnail_name       
            im = Image.open(full_image_name)
            im.thumbnail(self.thumbnail_size, Image.ANTIALIAS)
            im.save(full_thumbnail_name)


    def create_image_html_files(self, filelist):
        # Create a separate HTML file for each image with links to the 
        # previous and next image.  The Next and Previous links are circular
        # so for the first image the Previous link points to the last image
        # and for the last image the Next link points to the first image.
        n = len(filelist)
        if n == 1:
            fn_first = ''
            fn_last = ''
        else:  
            fn_first = filelist[0]
            fn_last = filelist[-1]
        for i in range(n):
            fn = filelist[i]  
            if i == 0:
                fn_prev = fn_last
            else:
                fn_prev = filelist[i-1]
            if i >= n-1:
                fn_next = fn_first
            else:
                fn_next = filelist[i+1]
            self.image_html(i, n, fn, fn_prev, fn_next)


    def create_pictures_index(self, dir):
        self.image_dir = os.path.realpath(dir)
        self.read_options_file()
        print 'Looking for JPG or PNG files in ' + self.image_dir
        ls = os.listdir(self.image_dir)
        filelist = []
        for f in ls:
            ext = os.path.splitext(f)[1]
            ext = ext.lower()
            if (ext in ['.png','.jpg']) and (f.find(self.thumbnail_filename_prefix) < 0):
                filelist.append(os.path.split(f)[1])

        n = len(filelist)
        if n == 0:
            print 'Nothing to do: No JPG or PNG files.'
        else:
            file_name = os.path.join(self.image_dir, self.opts['index_file_name'])
            print 'Creating ' + self.opts['index_file_name']
            index_file = open(file_name, 'w')
            self.write_index_html_head(index_file)
            filelist.sort()
            for f in filelist:
                print '  ' + f + ' -> ' + self.opts['index_file_name']
                full_image_name = os.path.join(self.image_dir, f)
                name, ext = os.path.splitext(f)
                thumbnail_name = self.thumbnail_filename_prefix + name + ext
                full_thumbnail_name = os.path.join(self.image_dir, thumbnail_name)
                            
                # Add thumbnail file name to HTML index.
                index_file.write('<a href="' + self.pic_html_filename(f) + '">')
                index_file.write('<img class="' + self.opts['css_class_prefix'] + '_img" src="' 
                               + thumbnail_name + '" alt="Thumbnail for ' + f + '">')
                index_file.write('</a>\n')
                
                self.create_thumbnail(full_image_name, thumbnail_name, full_thumbnail_name)

            self.create_image_html_files(filelist)
            self.write_index_html_tail(index_file)         


if __name__ == "__main__":
    print app_title
    p2h = Pics2HTML()
    # Takes one command line argument that is either -opt to create 
    # an options file or the directory path to process.
    # Note: Use optparse if more options are added 
    # [http://docs.python.org/library/optparse.html#module-optparse].
    if len(sys.argv) == 2:
        if sys.argv[1].lower() == '-opt':
            p2h.write_options_file(os.getcwd())
        else:
            p2h.create_pictures_index(sys.argv[1])
    else:         
        p2h.create_pictures_index(os.getcwd())
    print ' '
    t = raw_input('Press ENTER.')
